<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[「 iOS干货 」提高代码简洁的方法]]></title>
      <url>https://tate-zwt.github.io/2016/09/01/%E3%80%8C%20iOS%E5%B9%B2%E8%B4%A7%20%E3%80%8D%E6%8F%90%E9%AB%98%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>开发项目的时候，常常会有一些代码重复而且冗余，在用的时候需要写很长的代码或者用的地方也多，所以这个时候就需要集中起来封装，使代码复用性强，用短短的几行代码搞定。这些方法我都封装在<code>category、tools、View</code>，加上代码里都有写注释，用起来很方便，实用性强，读起来也易懂，可以让代码更加的简洁。里面有一些也是参考别人源码，也做了下搬运工，希望对你们开发项目有所帮助。</p>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><h6 id="WTSDK"><a href="#WTSDK" class="headerlink" title="WTSDK"></a>WTSDK</h6><p><img src="/images/WTSDK目录.png" alt="WTSDK目录.png"><br>看目录结构就觉得清晰易懂，反正我是这么觉得的☺️</p>
<h6 id="Category（分类）"><a href="#Category（分类）" class="headerlink" title="Category（分类）"></a>Category（分类）</h6><p><img src="/images/Category.png" alt="Category.png"></p>
<h6 id="NS（NS前缀的分类）"><a href="#NS（NS前缀的分类）" class="headerlink" title="NS（NS前缀的分类）"></a>NS（NS前缀的分类）</h6><p><img src="/images/NS.png" alt="NS.png"></p>
<h6 id="UI（UI前缀的分类）"><a href="#UI（UI前缀的分类）" class="headerlink" title="UI（UI前缀的分类）"></a>UI（UI前缀的分类）</h6><p><img src="/images/UI.png" alt="UI.png"><br>看<code>class名称</code>，它们都是对应对象的分类方法，里面扩展了很多实用性的功能，具体可以看源码。</p>
<h6 id="Tool（工具类集合）"><a href="#Tool（工具类集合）" class="headerlink" title="Tool（工具类集合）"></a>Tool（工具类集合）</h6><p><img src="/images/Tool.png" alt="Tool.png"><br><code>Singleton</code>是一个单例模式的宏使用方法：<br>在<code>.h</code>里写上<code>singleton_interface(类名称)</code>与<code>.m</code>里写上<code>singleton_implementation(类名称)</code>即完美支持MRC和ARC下的单例使用。<br><code>WTConst</code>里面包括很多实用性很强的宏定义，具体看源码。<br><code>WTUtility</code>里面定义了很多实用性很强的类方法，具体看源码。</p>
<h6 id="View（UITextField与UITextView）"><a href="#View（UITextField与UITextView）" class="headerlink" title="View（UITextField与UITextView）"></a>View（UITextField与UITextView）</h6><p><img src="/images/View.png" alt="View.png"><br><code>View</code>文件夹里包括<code>UITextField</code>与<code>UITextView</code>原生控件的封装。我一直觉得这两个原生控件每次用的时候都要加入好多的判断与代理方法，而且都是差不多一样的，所以我就针对这两个进行了封装，把常用的功能都集合在里面，比如限制文字输入长度等等，这样使用起来才更加的简洁。具体可以看下源码。</p>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>你可以看下<code>WTSDK</code>里面有啥需要的，单独拉某个文件到你的项目里使用即可。<br>如果你都要使用的话，直接导入<code>#import &quot;WTConst.h&quot;</code>即可。<br>注意如果用到<code>UIViewController+WT</code>还需要项目里有<a href="https://github.com/jdg/MBProgressHUD" target="_blank" rel="external">MBProgressHUD</a>这个库。</p>
<p>####源码在这<br><a href="https://github.com/Tate-zwt/WTSDK" target="_blank" rel="external">GitHub</a> 如果你觉得不错的话，麻烦你点一下Star，thank you all!</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS集成Ping++支付,绕过一些坑]]></title>
      <url>https://tate-zwt.github.io/2016/08/31/iOS%E9%9B%86%E6%88%90Ping++%E6%94%AF%E4%BB%98,%E7%BB%95%E8%BF%87%E4%B8%80%E4%BA%9B%E5%9D%91/</url>
      <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>这一段时间比较忙，主要公司的产品需要重构与加多一个货币支付系统。说到移动端的支付，自然会牵扯到支付这一块。支付这一块主流的目前就微信、支付宝、银联。做过这些SDK集成的开发者都知道，集成相对复杂，而且要花大量的时间去阅读他们提供的开发文档，不过还好现在有很多开发者都分享了他们的集成心得，使这件事越发简单，比如：<a href="http://www.jianshu.com/p/97d38b00e53d" target="_blank" rel="external">iOS支付[支付宝、银联、微信]</a>、<a href="http://www.jianshu.com/p/6d67cfe0f00c" target="_blank" rel="external">10分钟搞定支付宝和微信支付 的 各种填坑</a>等等，但是呢，其实还有更加简单的,<a href="https://www.pingxx.com/docs/overview" target="_blank" rel="external">Ping++</a>。<br><a id="more"></a></p>
<h4 id="Ping-能干嘛？"><a href="#Ping-能干嘛？" class="headerlink" title="Ping++能干嘛？"></a>Ping++能干嘛？</h4><p>Ping++ 是为移动端应用以及 PC 网页量身打造的下一代支付系统，通过一个 SDK 便可以同时支持移动端以及 PC 端网页的多种主流支付渠道，你只需要一次接入即可完成多个渠道的接入。 Ping++ SDK 包括 Client SDK 和 Server SDK 两部分，支持主流的七种后端开发语言，适配了 Android，iOS 和 HTML5 三种移动端平台以及 PC 端网页。ps：官方原话。</p>
<p>说说我的理解：<br>我觉得最方便的是，不需要移动端填写各种appkey，各种秘钥，像支付宝支付有秘钥特别麻烦，这一些繁琐的事情Ping++都帮你做了，你只要把这些申请下来的key保存在Ping++的配置信息系统就可以了。还要申请开通一些权限，不过这些操作都是我老大弄的，不过很方便就是了。<br>还有就是一行代码就可以调起各种支付这个对做过各种原生支付SDK的我，感觉很清爽，贴下代码，感受下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[Pingpp createPayment:charge</div><div class="line">viewController:weakSelf</div><div class="line">appURLScheme:kUrlScheme</div><div class="line">withCompletion:^(NSString *result, PingppError *error) &#123;</div><div class="line">NSLog(@&quot;completion block: %@&quot;, result);</div><div class="line">if (error == nil) &#123;</div><div class="line">NSLog(@&quot;PingppError is nil&quot;);</div><div class="line">&#125; else &#123;</div><div class="line">NSLog(@&quot;PingppError: code=%lu msg=%@&quot;,</div><div class="line">(unsigned long)error.code, [error getMsg]);</div><div class="line">&#125;</div><div class="line">[weakSelf showAlertMessage:result];</div><div class="line">&#125;];</div></pre></td></tr></table></figure></p>
<h4 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h4><p>1、使用 CocoaPods<br>在 Podfile 添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod &apos;Pingpp&apos;, &apos;~&gt; 2.2.6&apos;</div></pre></td></tr></table></figure></p>
<p>2、手动引入<br>下载 <a href="https://github.com/PingPlusPlus/pingpp-ios" target="_blank" rel="external">iOS SDK</a> 到本地，里面包含 lib 和 example 两个目录。example 目录下的是示例项目，你需要将 lib 目录下的文件添加到你的项目。<br>具体可以看Ping++的<a href="https://www.pingxx.com/docs/client/sdk/ios" target="_blank" rel="external">iOS SDK 接入指南</a>。</p>
<h4 id="说说我遇到的坑："><a href="#说说我遇到的坑：" class="headerlink" title="说说我遇到的坑："></a>说说我遇到的坑：</h4><p>首先说下微信支付的SDK再Ping++的Channels是显示Mmdpay的，刚开始害我找半天…有点夸张哈</p>
<p><img src="/images/SDK包.png" alt=""><br>我这里由于暂时只用到这两种支付，所以我把其它的都删除掉了，现在app都提倡瘦身嘛。</p>
<p>还有一点：<br>为了能正确获得结果回调请在工程 AppDelegate 文件中调用<code>[Pingpp handleOpenURL:url withCompletion:nil]</code>。<br>如果该方法的第二个参数传 nil，请在在 <code>createPayment</code> 方法的 <code>Completion</code> 中处理回调结果。否则，在这里处理结果。<br>如果你使用了微信分享、登录等一些看起来在这里“冲突”的模块，你可以先判断 url 的 host 来决定调用哪一方的方法。<br>也可以先调用 Ping++ 的方法，如果 return 的值为 false，表示这个 url 不是支付相关的，你再调用模块的方法。<br>贴上我解决这个问题的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// iOS 8 及以下请用这个</div><div class="line">- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation &#123;</div><div class="line">BOOL isPay = [Pingpp handleOpenURL:url withCompletion:nil];</div><div class="line">if(isPay)&#123;</div><div class="line">return isPay;</div><div class="line">&#125;else&#123;</div><div class="line">return  [UMSocialSnsService handleOpenURL:url wxApiDelegate:nil];</div><div class="line">&#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里值得注意一下，每次调用<code>[Pingpp handleOpenURL:url withCompletion:nil]</code>就会执行一次<code>[Pingpp createPayment:(NSObject *) appURLScheme:&lt;#(NSString *)#&gt; withCompletion:&lt;#^(NSString *result, PingppError *error)completion#&gt;]</code>方法里的回调。<br>大概就是这一些了，后续可能还会继续添加更多的支付功能，如果遇到坑，我还会继续更新此文章。</p>
<h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><p><a href="https://www.pingxx.com/docs/client/sdk/ios" target="_blank" rel="external">iOS SDK 接入指南</a><br><a href="http://www.jianshu.com/p/a933f9f74e9c" target="_blank" rel="external">iOS应用之 “Ping++” 支付集成</a><br><a href="http://www.jianshu.com/p/52dd853841b0" target="_blank" rel="external">Ping++ SDK，引入iOS配置说明</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS Runtime特性之关联对象]]></title>
      <url>https://tate-zwt.github.io/2016/04/17/iOS%20Runtime%E7%89%B9%E6%80%A7%E4%B9%8B%E5%85%B3%E8%81%94%E5%AF%B9%E8%B1%A1/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>现在你准备用一个系统的类或者是你写的类，但是这个类并不能满足你的需求，你需要额外添加一个属性。<br>一般解决办法要么是 <code>extends(继承)</code>，要么使用 <code>category(类别)</code>。<br>而我并不推荐使用 <code>extends</code> ，主要是耦合性太强，一般我使用 <code>category</code> 。<br>我们都知道，分类中是无法设置属性的，如果在分类的声明中写<code>@property</code> 只能为其生成<code>get</code> 和 <code>set</code> 方法的声明，<br>但是有时候使用类别也需要增加一个额外属性，<br>那么怎么办呢？<br>这个时候，<code>runtime</code>的关联属性就能发挥它的作用了。<br>一般都是<code>key value</code> 的存在。<br><a id="more"></a></p>
<h3 id="有关的方法"><a href="#有关的方法" class="headerlink" title="有关的方法"></a>有关的方法</h3><blockquote>
<p>objc_setAssociatedObject        设置关联对象使用<br>objc_getAssociatedObject          获取关联对象使用<br>objc_removeAssociatedObjects  移除关联对象使用</p>
</blockquote>
<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>一般我用在 <code>category</code> 里，合理使用它能让<code>category</code>发挥更大的作用。</p>
<ul>
<li><code>UIView</code> 的 <code>category</code></li>
</ul>
<p>.h文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#import &lt;UIKit/UIKit.h&gt;</div><div class="line">@interface UIView (WT)</div><div class="line">typedef void (^GestureActionBlock)(UIGestureRecognizer *ges);</div><div class="line">/** 单点击手势 */</div><div class="line">- (void)tapGesture:(GestureActionBlock)block;</div><div class="line">/** 长按手势 */</div><div class="line">- (void)longPressGestrue:(GestureActionBlock)block;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>.m文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">#import &quot;UIView+WT.h&quot;</div><div class="line">#import &lt;objc/runtime.h&gt;</div><div class="line">@implementation UIView (WT)</div><div class="line"></div><div class="line">static char kActionHandlerTapBlockKey;</div><div class="line">static char kActionHandlerTapGestureKey;</div><div class="line">static char kActionHandlerLongPressBlockKey;</div><div class="line">static char kActionHandlerLongPressGestureKey;</div><div class="line"></div><div class="line">//单点击手势</div><div class="line">- (void)tapGesture:(GestureActionBlock)block &#123;</div><div class="line">self.userInteractionEnabled = YES;</div><div class="line">UITapGestureRecognizer *gesture = objc_getAssociatedObject(self, &amp;kActionHandlerTapGestureKey);</div><div class="line">if (!gesture) &#123;</div><div class="line">gesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(handleActionForTapGesture:)];</div><div class="line">[self addGestureRecognizer:gesture];</div><div class="line">objc_setAssociatedObject(self, &amp;kActionHandlerTapGestureKey, gesture, OBJC_ASSOCIATION_RETAIN);</div><div class="line">&#125;</div><div class="line">objc_setAssociatedObject(self, &amp;kActionHandlerTapBlockKey, block, OBJC_ASSOCIATION_COPY);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)handleActionForTapGesture:(UITapGestureRecognizer *)gesture &#123;</div><div class="line">if (gesture.state == UIGestureRecognizerStateRecognized) &#123;</div><div class="line">GestureActionBlock block = objc_getAssociatedObject(self, &amp;kActionHandlerTapBlockKey);</div><div class="line">if (block) &#123;</div><div class="line">block(gesture);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//长按手势</div><div class="line">- (void)longPressGestrue:(GestureActionBlock)block &#123;</div><div class="line">self.userInteractionEnabled = YES;</div><div class="line">UILongPressGestureRecognizer *gesture = objc_getAssociatedObject(self, &amp;kActionHandlerLongPressGestureKey);</div><div class="line">if (!gesture) &#123;</div><div class="line">gesture = [[UILongPressGestureRecognizer alloc] initWithTarget:self action:@selector(handleActionForLongPressGesture:)];</div><div class="line">[self addGestureRecognizer:gesture];</div><div class="line">objc_setAssociatedObject(self, &amp;kActionHandlerLongPressGestureKey, gesture, OBJC_ASSOCIATION_RETAIN);</div><div class="line">&#125;</div><div class="line">objc_setAssociatedObject(self, &amp;kActionHandlerLongPressBlockKey, block, OBJC_ASSOCIATION_COPY);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)handleActionForLongPressGesture:(UITapGestureRecognizer *)gesture &#123;</div><div class="line">if (gesture.state == UIGestureRecognizerStateBegan) &#123;</div><div class="line">GestureActionBlock block = objc_getAssociatedObject(self, &amp;kActionHandlerLongPressBlockKey);</div><div class="line">if (block) &#123;</div><div class="line">block(gesture);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>我解释下里面的一些关键字段，比如 OBJC_ASSOCIATION_RETAIN 这个字段实际上是个枚举来的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">typedef OBJC_ENUM(uintptr_t, objc_AssociationPolicy) &#123;</div><div class="line">OBJC_ASSOCIATION_ASSIGN = 0,           /**&lt; Specifies a weak reference to the associated object. */</div><div class="line">OBJC_ASSOCIATION_RETAIN_NONATOMIC = 1, /**&lt; Specifies a strong reference to the associated object. </div><div class="line">*   The association is not made atomically. */</div><div class="line">OBJC_ASSOCIATION_COPY_NONATOMIC = 3,   /**&lt; Specifies that the associated object is copied. </div><div class="line">*   The association is not made atomically. */</div><div class="line">OBJC_ASSOCIATION_RETAIN = 01401,       /**&lt; Specifies a strong reference to the associated object.</div><div class="line">*   The association is made atomically. */</div><div class="line">OBJC_ASSOCIATION_COPY = 01403          /**&lt; Specifies that the associated object is copied.</div><div class="line">*   The association is made atomically. */</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>用法跟<code>@property</code>中的<code>strong 、weak、copy 、assign 、retain</code>等声明属性的修饰符一样，我上面用到了<code>block</code>就对应<code>OBJC_ASSOCIATION_COPY</code>,而<code>UITapGestureRecognizer</code>与<code>UILongPressGestureRecognizer</code>则对应<code>OBJC_ASSOCIATION_RETAIN</code>进行修饰。<br>当然实际上我的<code>UIView</code>的<code>category</code>不止这些，可以参考我开发项目总结的一套库<br><a href="https://github.com/Tate-zwt/WTSDK" target="_blank" rel="external">WTSDK</a><br>可能有些地方描述得不是很好，或者描述错误了，希望你们能给我留言，thank！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS Develop Tips]]></title>
      <url>https://tate-zwt.github.io/2016/03/20/iOS%20Develop%20Tips/</url>
      <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>记录一些常用到的代码块 -&gt; self command C+V😄  continuous updating!</p>
<h5 id="Objective-C-tips"><a href="#Objective-C-tips" class="headerlink" title="Objective-C tips"></a>Objective-C tips</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//使控件从导航栏以下开始</div><div class="line">self.edgesForExtendedLayout=UIRectEdgeNone;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//将navigation返回按钮文字position设置不在屏幕上显示</div><div class="line">[[UIBarButtonItem appearance] setBackButtonTitlePositionAdjustment:UIOffsetMake(NSIntegerMin, NSIntegerMin) forBarMetrics:UIBarMetricsDefault];</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//解决ScrollView等在viewController无法滚动到最顶部</div><div class="line">//自动滚动调整，默认为YES</div><div class="line">self.automaticallyAdjustsScrollViewInsets = NO;</div></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//隐藏navigationBar上返回按钮</div><div class="line">[self.navigationController.navigationItem setHidesBackButton:YES];</div><div class="line">[self.navigationItem setHidesBackButton:YES];</div><div class="line">[self.navigationController.navigationBar.backItem setHidesBackButton:YES];</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//去除tableview底部多余的空白cell </div><div class="line">self.tableView.tableFooterView = [UIView new];</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">/** 显示完整的CellSeparator线 */</div><div class="line">-(void)tableView:(UITableView *)tableView willDisplayCell:(UITableViewCell *)cell forRowAtIndexPath:(NSIndexPath *)indexPath&#123;</div><div class="line">if ([cell respondsToSelector:@selector(setSeparatorInset:)]) &#123;</div><div class="line">[cell setSeparatorInset:UIEdgeInsetsZero];</div><div class="line">&#125;</div><div class="line">if ([cell respondsToSelector:@selector(setPreservesSuperviewLayoutMargins:)]) &#123;</div><div class="line">[cell setPreservesSuperviewLayoutMargins:NO];</div><div class="line">&#125;</div><div class="line">if ([cell respondsToSelector:@selector(setLayoutMargins:)]) &#123;</div><div class="line">[cell setLayoutMargins:UIEdgeInsetsZero];</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>滑动的时候隐藏navigation bar<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">navigationController.hidesBarsOnSwipe = Yes;</div></pre></td></tr></table></figure></p>
<p>将Navigationbar变成透明而不模糊<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[self.navigationController.navigationBar setBackgroundImage:[UIImage new]</div><div class="line">forBarMetrics:UIBarMetricsDefault];</div><div class="line">self.navigationController.navigationBar .shadowImage = [UIImage new];</div><div class="line">self.navigationController.navigationBar .translucent = YES;</div></pre></td></tr></table></figure></p>
<p>NSString<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">//截取字符串</div><div class="line">NSString *interceptStr1 = @&quot;Tate_zwt&quot;;</div><div class="line">interceptStr1 = [interceptStr1 substringToIndex:3];//截取下标3之前的字符串</div><div class="line">NSLog(@&quot;截取的值为:%@&quot;,interceptStr1);//截取的值为:Tat</div><div class="line"></div><div class="line">NSString *interceptStr2 = @&quot;Tate_zwt&quot;;</div><div class="line">NSRange rang = &#123;3,1&#125;;</div><div class="line">interceptStr2 = [interceptStr2 substringWithRange:rang];//截取rang范围的字符串</div><div class="line">NSLog(@&quot;截取的值为:%@&quot;,interceptStr2);//截取的值为:e</div><div class="line"></div><div class="line">NSString *interceptStr3 = @&quot;Tate_zwt&quot;;</div><div class="line">interceptStr3 = [interceptStr3 substringFromIndex:3];//截取下标3之后的字符串</div><div class="line">NSLog(@&quot;截取的值为:%@&quot;,interceptStr3);//截取的值为:e_zwt</div><div class="line"></div><div class="line"></div><div class="line">//匹配字符串</div><div class="line">NSString *matchingStr = @&quot;Tate_zwt&quot;;</div><div class="line">NSRange range = [matchingStr rangeOfString:@&quot;t&quot;];//匹配得到的下标</div><div class="line">NSLog(@&quot;rang:%@&quot;,NSStringFromRange(range));//rang:&#123;2, 1&#125;</div><div class="line">matchingStr = [matchingStr substringWithRange:range];//截取范围类的字符串</div><div class="line">NSLog(@&quot;截取的值为:%@&quot;,matchingStr);//截取的值为:t</div><div class="line"></div><div class="line"></div><div class="line">//分割字符串</div><div class="line">NSString *splitStr = @&quot;Tate_zwt_zwt&quot;;</div><div class="line">NSArray *array = [splitStr componentsSeparatedByString:@&quot;_&quot;]; //从字符A中分隔成2个元素的数组</div><div class="line">NSLog(@&quot;array:%@&quot;,array); //输出3个对象分别是:Tate,zwt,zwt</div><div class="line"></div><div class="line"></div><div class="line">//拼接字符串</div><div class="line">NSMutableString *appendStr =  [NSMutableString string];</div><div class="line">//使用逗号拼接</div><div class="line">//[append appendFormat:@&quot;%@zwt&quot;, append.length ? @&quot;,&quot; : @&quot;&quot;];</div><div class="line">[appendStr appendString:@&quot;我是&quot;];</div><div class="line">[appendStr appendString:@&quot;Tate-zwt&quot;];</div><div class="line">NSLog(@&quot;%@&quot;,appendStr);//输出:我是Tate-zwt</div><div class="line"></div><div class="line"></div><div class="line">//替换字符串</div><div class="line">NSString *replaceStr = @&quot;我是&amp;nbspTate-zwt&quot;;</div><div class="line">replaceStr = [replaceStr stringByReplacingOccurrencesOfString:@&quot;&amp;nbsp&quot; withString:@&quot;&quot;];</div><div class="line">NSLog(@&quot;%@&quot;,replaceStr);//输出:我是Tate-zwt</div><div class="line"></div><div class="line"></div><div class="line">//判断字符串内是否还包含特定的字符串(前缀，后缀)</div><div class="line">NSString *hasStr = @&quot;Tate.zwt&quot;;</div><div class="line">[hasStr hasPrefix:@&quot;Tate&quot;] == 1 ?  NSLog(@&quot;YES&quot;) : NSLog(@&quot;NO&quot;); //前缀</div><div class="line">[hasStr hasSuffix:@&quot;.zwt&quot;] == 1 ?  NSLog(@&quot;YES&quot;) : NSLog(@&quot;NO&quot;); // 后缀</div><div class="line"></div><div class="line"></div><div class="line">//字符串是否包含特定的字符</div><div class="line">NSString *containStr = @&quot;iOS Developer,喜欢做有趣的产品&quot;;</div><div class="line">NSRange rangeDeveloper = [containStr rangeOfString:@&quot;Developer&quot;];</div><div class="line">NSRange rangeProduct = [containStr rangeOfString:@&quot;Product&quot;];</div><div class="line">rangeDeveloper.location != NSNotFound == 1 ?  NSLog(@&quot;YES&quot;) : NSLog(@&quot;NO&quot;);</div><div class="line">rangeProduct.location != NSNotFound == 1 ?  NSLog(@&quot;YES&quot;) : NSLog(@&quot;NO&quot;);</div></pre></td></tr></table></figure></p>
<p>UIPageControl如何改变点的大小?<br>重写setCurrentPage方法即可:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">- (void)setCurrentPage:(NSInteger)page &#123;</div><div class="line">[super setCurrentPage:page];</div><div class="line">for (NSUInteger subviewIndex = 0; subviewIndex &lt; [self.subviews count]; subviewIndex++) &#123;</div><div class="line">UIView *subview = [self.subviews objectAtIndex:subviewIndex];</div><div class="line">UIImageView *imageView = nil;</div><div class="line">if (subviewIndex == page) &#123;</div><div class="line">CGFloat w = 8;</div><div class="line">CGFloat h = 8;</div><div class="line">imageView = [[UIImageView alloc] initWithFrame:CGRectMake(-1.5, -1.5, w, h)];</div><div class="line">imageView.image = [UIImage imageNamed:@&quot;banner_red&quot;];</div><div class="line">[subview setFrame:CGRectMake(subview.frame.origin.x, subview.frame.origin.y, w, h)];</div><div class="line">&#125; else &#123;</div><div class="line">CGFloat w = 5;</div><div class="line">CGFloat h = 5;</div><div class="line">imageView = [[UIImageView alloc] initWithFrame:CGRectMake(0, 0, w, h)];</div><div class="line">imageView.image = [UIImage imageNamed:@&quot;banner_gray&quot;];</div><div class="line">[subview setFrame:CGRectMake(subview.frame.origin.x, subview.frame.origin.y, w, h)];</div><div class="line">&#125;</div><div class="line">imageView.tag = 10010;</div><div class="line">UIImageView *lastImageView = (UIImageView *) [subview viewWithTag:10010];</div><div class="line">[lastImageView removeFromSuperview]; //把上一次添加的view移除</div><div class="line">[subview addSubview:imageView];</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如何改变多行UILabel的行高？<br>Show me the code：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">_promptLabel = [UILabel new];</div><div class="line">NSString *labelText = @&quot;Talk is cheap\nShow me the code&quot;;</div><div class="line">_promptLabel.text = labelText;</div><div class="line">_promptLabel.numberOfLines = 2;</div><div class="line">_promptLabel.font = [UIFont systemFontOfSize:14];</div><div class="line">NSMutableAttributedString *attributedString = [[NSMutableAttributedString alloc] initWithString:labelText];</div><div class="line">NSMutableParagraphStyle *paragraphStyle = [[NSMutableParagraphStyle alloc] init];</div><div class="line">[paragraphStyle setLineSpacing:10]; //调整行间距</div><div class="line">[attributedString addAttribute:NSParagraphStyleAttributeName value:paragraphStyle range:NSMakeRange(0, [labelText length])];</div><div class="line">_promptLabel.attributedText = attributedString;</div><div class="line">[_promptLabel sizeToFit];</div><div class="line">[self.view addSubview:_promptLabel];</div></pre></td></tr></table></figure></p>
<p>如何让Label等控件支持HTML格式的代码？<br>使用NSAttributedString:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">NSString *htmlString = @&quot;&lt;div&gt;Tate&lt;span style=&apos;color:#1C86EE;&apos;&gt;《iOS Develop Tips》&lt;/span&gt;get &lt;span style=&apos;color:#1C86EE;&apos;&gt;Tate_zwt&lt;/span&gt; 打赏 &lt;span style=&apos;color:#FF3E96;&apos;&gt;100&lt;/span&gt; 金币&lt;/div&gt;&quot;;</div><div class="line">NSAttributedString *attributedString = [[NSAttributedString alloc] initWithData:[htmlString dataUsingEncoding:NSUnicodeStringEncoding] options:@&#123; NSDocumentTypeDocumentAttribute : NSHTMLTextDocumentType &#125; documentAttributes:nil error:nil];</div><div class="line">_contentLabel.attributedText = attributedString;</div></pre></td></tr></table></figure></p>
<p>如何让Label等控件同时支持HTML代码和行间距？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">NSMutableAttributedString *attributedString = [[NSMutableAttributedString alloc] initWithData:[_open_bonus_article dataUsingEncoding:NSUnicodeStringEncoding] options:@&#123; NSDocumentTypeDocumentAttribute : NSHTMLTextDocumentType &#125; documentAttributes:nil error:nil];</div><div class="line">NSMutableParagraphStyle *paragraphStyle = [[NSMutableParagraphStyle alloc] init];</div><div class="line">[paragraphStyle setLineSpacing:12]; //调整行间距</div><div class="line">[attributedString addAttribute:NSParagraphStyleAttributeName value:paragraphStyle range:NSMakeRange(0, [attributedString length])];</div><div class="line">_detailLabel.attributedText = attributedString;</div><div class="line">[_detailLabel sizeToFit];</div></pre></td></tr></table></figure></p>
<p>pop回根控制器视图<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//这里也可以指定pop到哪个索引控制器</div><div class="line">[self.navigationController popToViewController: [self.navigationController.viewControllers objectAtIndex: ([self.navigationController.viewControllers count] - 3)] animated:YES];</div><div class="line">//或者</div><div class="line">[self.navigationController popToRootViewControllerAnimated:YES];</div></pre></td></tr></table></figure></p>
<p>dismiss回根控制器视图(PS：只能返回两层)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">if ([self respondsToSelector:@selector(presentingViewController)])&#123;</div><div class="line">self.presentingViewController.view.alpha = 0;</div><div class="line">[self.presentingViewController.presentingViewController dismissViewControllerAnimated:YES completion:nil];</div><div class="line">&#125;else &#123;</div><div class="line">self.parentViewController.view.alpha = 0;</div><div class="line">[self.parentViewController.parentViewController dismissViewControllerAnimated:YES completion:nil];</div><div class="line">&#125;</div><div class="line">//或者</div><div class="line">if ([self respondsToSelector:@selector(presentingViewController)])&#123;</div><div class="line">[self.presentingViewController.presentingViewController dismissViewControllerAnimated:YES completion:nil];</div><div class="line">&#125;else &#123;</div><div class="line">[self.parentViewController.parentViewController dismissViewControllerAnimated:YES completion:nil];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>两个控制器怎么无限push?<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">NSMutableArray *vcArr = [self.navigationController.viewControllers mutableCopy];</div><div class="line">[vcArr removeLastObject];</div><div class="line">[vcArr addObject:loginVC];</div><div class="line">[self.navigationController setViewControllers:vcArr animated:YES];</div></pre></td></tr></table></figure></p>
<p>NSDictionary 怎么转成NSString<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">NSData *jsonData = [NSJSONSerialization dataWithJSONObject:response.data options:0 error:0];</div><div class="line">NSString *dataStr =  [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS播放GIF动画的几种方式]]></title>
      <url>https://tate-zwt.github.io/2016/03/02/iOS%E6%92%AD%E6%94%BEGIF%E5%8A%A8%E7%94%BB%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h4 id="1-使用UIWebView播放"><a href="#1-使用UIWebView播放" class="headerlink" title="1.使用UIWebView播放"></a>1.使用UIWebView播放</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">#pragma clang diagnostic ignored &quot;-Wnonnull&quot;</div><div class="line">NSString *path = [[NSBundle mainBundle] pathForResource:@&quot;&lt;#gifName#&gt;&quot; ofType:@&quot;gif&quot;];</div><div class="line">NSData *gifData = [NSData dataWithContentsOfFile:path];</div><div class="line">UIWebView *webView = [[UIWebView alloc] initWithFrame:CGRectMake(&lt;#x#&gt;, &lt;#y#&gt;, &lt;#w#&gt;, &lt;#h#&gt;)];</div><div class="line">webView.scalesPageToFit = YES;</div><div class="line">[webView loadData:gifData MIMEType:@&quot;image/gif&quot; textEncodingName:nil baseURL:nil];</div><div class="line">webView.backgroundColor = [UIColor clearColor];</div><div class="line">webView.opaque = NO;</div><div class="line">[self.view addSubview:webView];</div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="2-将GIF图片分解成多张PNG图片，使用UIImageView播放。"><a href="#2-将GIF图片分解成多张PNG图片，使用UIImageView播放。" class="headerlink" title="2.将GIF图片分解成多张PNG图片，使用UIImageView播放。"></a>2.将GIF图片分解成多张PNG图片，使用UIImageView播放。</h4><p>需要导入<code>#import &lt;ImageIO/ImageIO.h&gt;</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">NSURL *fileUrl = [[NSBundle mainBundle] URLForResource:@&quot;&lt;#gifName#&gt;&quot; withExtension:@&quot;gif&quot;]; //加载GIF图片</div><div class="line">CGImageSourceRef gifSource = CGImageSourceCreateWithURL((CFURLRef) fileUrl, NULL);           //将GIF图片转换成对应的图片源</div><div class="line">size_t frameCout = CGImageSourceGetCount(gifSource);                                         //获取其中图片源个数，即由多少帧图片组成</div><div class="line">NSMutableArray *frames = [[NSMutableArray alloc] init];                                      //定义数组存储拆分出来的图片</div><div class="line">for (size_t i = 0; i &lt; frameCout; i++) &#123;</div><div class="line">CGImageRef imageRef = CGImageSourceCreateImageAtIndex(gifSource, i, NULL); //从GIF图片中取出源图片</div><div class="line">UIImage *imageName = [UIImage imageWithCGImage:imageRef];                  //将图片源转换成UIimageView能使用的图片源</div><div class="line">[frames addObject:imageName];                                              //将图片加入数组中</div><div class="line">CGImageRelease(imageRef);</div><div class="line">&#125;</div><div class="line">UIImageView *gifImageView = [[UIImageView alloc] initWithFrame:CGRectMake(&lt;#x#&gt;, &lt;#y#&gt;, &lt;#w#&gt;, &lt;#h#&gt;)];</div><div class="line">gifImageView.animationImages = frames; //将图片数组加入UIImageView动画数组中</div><div class="line">gifImageView.animationDuration = 0.15; //每次动画时长</div><div class="line">[gifImageView startAnimating];         //开启动画，此处没有调用播放次数接口，UIImageView默认播放次数为无限次，故这里不做处理</div><div class="line">[self.view addSubview:gifImageView];</div></pre></td></tr></table></figure>
<h5 id="至于哪种方式性能好呢？"><a href="#至于哪种方式性能好呢？" class="headerlink" title="至于哪种方式性能好呢？"></a>至于哪种方式性能好呢？</h5><blockquote>
<p>使用UIWebView性能会好点，UIImageView播放是通过定时器来控制图片模拟动画的，它们控制的桢速是固定的。如果设置的模拟桢速跟gif本身的桢速相近的话倒没什么，如果桢速相差过大就很耗性能。</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS一行代码集成上下拉逻辑]]></title>
      <url>https://tate-zwt.github.io/2016/02/11/iOS%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E9%9B%86%E6%88%90%E4%B8%8A%E4%B8%8B%E6%8B%89%E9%80%BB%E8%BE%91/</url>
      <content type="html"><![CDATA[<p>通常我们为了方便集成上拉下拉都会使用一些第三方的框架，但是它们大多只是提供了一些回调，初学者还是要写两个方法，分别是第一次加载与更多加载，在此，我分享下我平时项目里怎么去处理的。</p>
<h4 id="WTNetworkingRefreshManager"><a href="#WTNetworkingRefreshManager" class="headerlink" title="WTNetworkingRefreshManager"></a>WTNetworkingRefreshManager</h4><p>这个是我自己封装的工具类，适用于UITableview、UICollectionView.<br><a id="more"></a></p>
<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><blockquote>
<p>使用到的第三方框架<br><a href="https://github.com/AFNetworking/AFNetworking" target="_blank" rel="external">AFNetworking</a>  网络处理框架<br><a href="https://github.com/jdg/MBProgressHUD" target="_blank" rel="external">MBProgressHUD</a>  hud提示框框架<br><a href="https://github.com/CoderMJLee/MJExtension" target="_blank" rel="external">MJExtension</a>   字典转模型框架<br><a href="https://github.com/CoderMJLee/MJRefresh" target="_blank" rel="external">MJRefresh</a> 用法简单的下拉刷新框架</p>
</blockquote>
<h4 id="核心文件"><a href="#核心文件" class="headerlink" title="核心文件"></a>核心文件</h4><p><img src="/images/main.jpeg" alt="main"><br><code>UIViewController+WT</code>  主要是对HUD的封装，一个<code>category</code>，<code>WTNetworking</code>主要对<code>AFNetworking</code>进行进一步封装， <code>WTNetworkingRefreshManager</code> 提供了一些处理上下拉逻辑的方法，也可以根据自身项目的需求改动里面的代码</p>
<h4 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h4><p>拖动<code>WTNetworkingRefreshManager</code>文件夹到你的项目里<br>确保项目里已经集成必备的框架<br>在需要用到的地方导入<code>import &quot;WTNetworkingRefreshManager.h&quot;</code></p>
<p>在 <code>WTNetworkingRefreshManager.h</code> 根据自身设置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#define BeginPage (0)     //页数固定从1开始  （与当前后台设置的起始页数为准）</div><div class="line">#define PageParam @&quot;page&quot; //有页的概念时 请求后台页的字段固定</div><div class="line">#define RowsParam @&quot;rows&quot; //有页的概念时 请求后台每页的字段固定</div><div class="line">#define RowsNum (10)      //有页的概念时 每页多少条</div><div class="line">#define DataKey @&quot;dataList&quot; // 返回数据的对应Key,用来取值</div></pre></td></tr></table></figure>
<p>使用它提供的类方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">*  类方法 -&gt; perfect 😀</div><div class="line">*  @param api       接口</div><div class="line">*  @param params    参数</div><div class="line">*  @param isPages   是否有页数</div><div class="line">*  @param view      UITableview、UICollectionView</div><div class="line">*  @param dataSoure 数据源</div><div class="line">*  @param superVc   所持有控制器</div><div class="line">*  @param manager   AFN</div><div class="line">*  @param modclass  模型</div><div class="line">*  @param success   成功回调</div><div class="line">*  @param fail      失败回调</div><div class="line">*/</div><div class="line">+ (void)api:(NSString *)api params:(NSDictionary *)params pages:(BOOL)isPages tv:(UIView *)view dataSoure:(NSMutableArray *)dataSoure vc:(UIViewController *)superVc af:(AFHTTPRequestOperationManager *)manager modClass:(Class)modclass suc:(NetSuccessBlock)success fail:(NetFailureBlock)fail;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">*  处理用到的模型(可以自己定义)</div><div class="line">*/</div><div class="line">- (void)customHandleMod &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>具体可以参考源代码</p>
<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>点击这下载<a href="https://github.com/Tate-zwt/WTNetworkingRefreshManager" target="_blank" rel="external">源代码</a>，欢迎点star</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS 集成极光推送，绕过一些坑]]></title>
      <url>https://tate-zwt.github.io/2016/02/02/iOS%20%E9%9B%86%E6%88%90%E6%9E%81%E5%85%89%E6%8E%A8%E9%80%81%EF%BC%8C%E7%BB%95%E8%BF%87%E4%B8%80%E4%BA%9B%E5%9D%91/</url>
      <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>最近公司要求把维护期的项目都集成极光推送，集成期间遇到一些小坑，特此在这总结！</p>
<h4 id="极光推送能干嘛？"><a href="#极光推送能干嘛？" class="headerlink" title="极光推送能干嘛？"></a>极光推送能干嘛？</h4><blockquote>
<p>1.为 JPush Server 上报 Device Token，免除开发者管理 Device Token 的麻烦<br>2.支持iOS APNs推送<br>3.前台运行时，可接收由JPush下发的（透传的）自定义消息<br>4.灵活管理接收用户：Tag（标签分组）、Alias（用户别名）、RegistrationID（设备注册ID）<br><a id="more"></a><br>知道能干嘛了那就开始动手集成👌</p>
</blockquote>
<h4 id="配push证书："><a href="#配push证书：" class="headerlink" title="配push证书："></a>配push证书：</h4><p>此步骤直接看极光的 <a href="http://docs.jpush.io/client/ios_tutorials/#ios_1" target="_blank" rel="external">文档</a>即可,写得很详细😄</p>
<h4 id="导入必要的框架"><a href="#导入必要的框架" class="headerlink" title="导入必要的框架"></a>导入必要的框架</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">CFNetwork.framework</div><div class="line">CoreFoundation.framework</div><div class="line">CoreTelephony.framework</div><div class="line">SystemConfiguration.framework</div><div class="line">CoreGraphics.framework</div><div class="line">Foundation.framework</div><div class="line">UIKit.framework</div><div class="line">Security.framework</div><div class="line">Xcode7需要的是libz.tbd；Xcode7以下版本是libz.dylib</div></pre></td></tr></table></figure>
<h4 id="创建并配置PushConfig-plist文件"><a href="#创建并配置PushConfig-plist文件" class="headerlink" title="创建并配置PushConfig.plist文件"></a>创建并配置PushConfig.plist文件</h4><blockquote>
<p>在你的工程中创建一个新的Property List文件，并将其命名为PushConfig.plist，文件所含字段如下：<br>CHANNEL<br>指明应用程序包的下载渠道，为方便分渠道统计，具体值由你自行定义，如：App Store。<br>APP_KEY<br>填写管理Portal上创建应用后自动生成的AppKey值。请确保应用内配置的 AppKey 与第1步在 Portal 上创建应用后生成的 AppKey 一致。<br>APS_FOR_PRODUCTION<br>1.3.1版本新增，用于标识当前应用所使用的APNs证书环境。<br>0 (默认值)表示采用的是开发证书，1 表示采用生产证书发布应用。<br>注：此字段的值要与Build Settings的Code Signing配置的证书环境一致。<br>在1.2.2或之前版本的配置文件中，有 TEST_MODE 这个键，新版的SDK不再使用，可以将它删除。</p>
</blockquote>
<p><img src="/images/PushConfig.jpeg" alt="PushConfig"></p>
<h4 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h4><p>首先在<br>AppDelegate.m<br>导入</p>
<p>#import “JPUSHService.h”<br>在对应的方法<br>didFinishLaunchingWithOptions<br>里贴上核心代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">//极光推送</div><div class="line">if ([[UIDevice currentDevice].systemVersion floatValue] &gt;= 8.0) &#123;</div><div class="line">//可以添加自定义categories</div><div class="line">[JPUSHService registerForRemoteNotificationTypes:(UIUserNotificationTypeBadge |</div><div class="line">UIUserNotificationTypeSound |</div><div class="line">UIUserNotificationTypeAlert)</div><div class="line">categories:nil];</div><div class="line">&#125; else &#123;</div><div class="line">//categories 必须为nil</div><div class="line">[JPUSHService registerForRemoteNotificationTypes:(UIRemoteNotificationTypeBadge |</div><div class="line">UIRemoteNotificationTypeSound |</div><div class="line">UIRemoteNotificationTypeAlert)</div><div class="line">categories:nil];</div><div class="line">&#125;</div><div class="line">//JAppKey : 是你在极光推送申请下来的appKey Jchannel : 可以直接设置默认值即可 Publish channel</div><div class="line">[JPUSHService setupWithOption:launchOptions appKey:JAppKey</div><div class="line">channel:Jchannel apsForProduction:NO]; //如果是生产环境应该设置为YES</div></pre></td></tr></table></figure></p>
<p>之后还需要加入以下方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken &#123;</div><div class="line">// Required</div><div class="line">[JPUSHService registerDeviceToken:deviceToken];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">-(void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo&#123;</div><div class="line"></div><div class="line">NSString *alert = [[userInfo objectForKey:@&quot;aps&quot;] objectForKey:@&quot;alert&quot;];</div><div class="line"></div><div class="line">if (application.applicationState == UIApplicationStateActive) &#123;</div><div class="line"></div><div class="line">UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@&quot;推送消息&quot;</div><div class="line">message:alert</div><div class="line">delegate:self</div><div class="line">cancelButtonTitle:@&quot;OK&quot;</div><div class="line">otherButtonTitles:nil];</div><div class="line">[alertView show];</div><div class="line">&#125;</div><div class="line">[application setApplicationIconBadgeNumber:0];</div><div class="line"></div><div class="line">[JPUSHService handleRemoteNotification:userInfo];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们还能监听极光推送生命周期通知：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">API里面提供了下面 5 种类型的通知：</div><div class="line"></div><div class="line">extern NSString * const kJPFNetworkDidSetupNotification; // 建立连接</div><div class="line"></div><div class="line">extern NSString * const kJPFNetworkDidCloseNotification; // 关闭连接</div><div class="line"></div><div class="line">extern NSString * const kJPFNetworkDidRegisterNotification; // 注册成功</div><div class="line"></div><div class="line">extern NSString * const kJPFNetworkDidLoginNotification; // 登录成功</div><div class="line"></div><div class="line">温馨提示： </div><div class="line">Registration id 需要在执行到kJPFNetworkDidLoginNotification的方法里获取</div><div class="line"></div><div class="line">extern NSString * const kJPFNetworkDidReceiveMessageNotification; // 收到自定义消息(非APNS)</div><div class="line"></div><div class="line">其中，kJPFNetworkDidReceiveMessageNotification传递的数据可以通过NSNotification中的userInfo方法获取，包括标题、内容、extras信息等</div></pre></td></tr></table></figure>
<h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><h6 id="Tag（标签分组）-amp-Alias（用户别名）"><a href="#Tag（标签分组）-amp-Alias（用户别名）" class="headerlink" title="Tag（标签分组）&amp; Alias（用户别名）"></a>Tag（标签分组）&amp; Alias（用户别名）</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//用于绑定Tag的 根据自己想要的Tag加入，值得注意的是这里Tag需要用到NSSet</div><div class="line">[JPUSHService setTags:[NSSet set]callbackSelector:nil object:self];</div><div class="line">//用于绑定Alias的  使用NSString 即可</div><div class="line">[JPUSHService setAlias:@&quot;&quot; callbackSelector:nil object:self];</div></pre></td></tr></table></figure>
<p>如果想要即要绑定Alias也要绑定Tag,必须使用以下方法，已被坑<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//用于同时绑定Tag与Alias的</div><div class="line">[JPUSHService setTags:[NSSet set] alias:@&quot;&quot; callbackSelector:nil target:self];</div></pre></td></tr></table></figure></p>
<h6 id="一般在项目哪里绑定呢？"><a href="#一般在项目哪里绑定呢？" class="headerlink" title="一般在项目哪里绑定呢？"></a>一般在项目哪里绑定呢？</h6><p>我主要是在项目的登录成功或者自动登录后，使用用户的唯一标示进行绑定，或者根据需求添加一些前缀</p>
<h6 id="去除绑定"><a href="#去除绑定" class="headerlink" title="去除绑定"></a>去除绑定</h6><p>用户进行退出登录的方法里添加去除绑定即可，值得注意的是用到即时通讯的话，被挤下线也要去除绑定，已被坑，贴代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//没有值就代表去除</div><div class="line">[JPUSHService setTags:[NSSet set]callbackSelector:nil object:self];</div><div class="line">[JPUSHService setAlias:@&quot;&quot; callbackSelector:nil object:self];</div><div class="line">[JPUSHService setTags:[NSSet set] alias:@&quot;&quot; callbackSelector:nil target:self];</div></pre></td></tr></table></figure></p>
<h4 id="测试是否集成成功"><a href="#测试是否集成成功" class="headerlink" title="测试是否集成成功"></a>测试是否集成成功</h4><p>到极光<a href="https://www.jpush.cn/push/apps/c8d9798cc63b93bf2c1ed834/push/notification/" target="_blank" rel="external">平台</a>测试推送：</p>
<p><img src="/images/测试推送.jpg" alt="测试推送"><br>只要推送成功，剩下的由后台根据Alias或者Tag来推送就可以了😄</p>
<h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>关于推送来的小红点角标，简称<code>badge</code>。默认是极光推送过来一次角标<code>+1</code>，这个值<code>badge</code>是由后台推送过来的消息传的值，但是当用户看了，角标会默认被清除，如果你没有去告诉后台的话，后台下次推送过来，你的<code>badge</code>显示的值还是你上一次的值加一，那如何解决这个问题呢？<br>细心的开发者会去查看极光推送的API文档，但是我觉得看文档就有点麻烦了，所以我直接去看<code>JPUSHService.h</code>文件，所以我发现极光为这个问题提供了解决的方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">/*!</div><div class="line">* @abstract 设置角标(到服务器)</div><div class="line">*</div><div class="line">* @param value 新的值. 会覆盖服务器上保存的值(这个用户)</div><div class="line">*</div><div class="line">* @discussion 本接口不会改变应用本地的角标值.</div><div class="line">* 本地仍须调用 UIApplication:setApplicationIconBadgeNumber 函数来设置脚标.</div><div class="line">*</div><div class="line">* 本接口用于配合 JPush 提供的服务器端角标功能.</div><div class="line">* 该功能解决的问题是, 服务器端推送 APNs 时, 并不知道客户端原来已经存在的角标是多少, 指定一个固定的数字不太合理.</div><div class="line">*</div><div class="line">* JPush 服务器端脚标功能提供:</div><div class="line">*</div><div class="line">* - 通过本 API 把当前客户端(当前这个用户的) 的实际 badge 设置到服务器端保存起来;</div><div class="line">* - 调用服务器端 API 发 APNs 时(通常这个调用是批量针对大量用户),</div><div class="line">*   使用 &quot;+1&quot; 的语义, 来表达需要基于目标用户实际的 badge 值(保存的) +1 来下发通知时带上新的 badge 值;</div><div class="line">*/</div><div class="line">+ (BOOL)setBadge:(NSInteger)value;</div></pre></td></tr></table></figure></p>
<p>而且我还发现极光推送也能收集Crash日志,之前只知道友盟与听云</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">/*!</div><div class="line">* @abstract 开启Crash日志收集</div><div class="line">*</div><div class="line">* @discussion 默认是关闭状态.</div><div class="line">*/</div><div class="line">+ (void)crashLogON;</div></pre></td></tr></table></figure>
<p>如何改变推送过来的提示音呢？<br>只需要让服务端设置<code>sound</code>字段就可以了。</p>
<blockquote>
<p>iOS 通知声音 (sound)<br>APNs通知，通过这个字段指定声音。默认为default，即系统默认声音。<br>如果设置为空值，则为静音。<br>如果设置为特殊的名称，则需要你的App里配置了该声音才可以正常。</p>
</blockquote>
<h4 id="JPushSDK资源下载"><a href="#JPushSDK资源下载" class="headerlink" title="JPushSDK资源下载"></a><a href="http://docs.jpush.io/resources/" target="_blank" rel="external">JPushSDK资源下载</a></h4>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[解决 iOS View Controller Push/Pop 时的黑影]]></title>
      <url>https://tate-zwt.github.io/2015/12/05/%E8%A7%A3%E5%86%B3%20iOS%20View%20Controller%20Push:Pop%20%E6%97%B6%E7%9A%84%E9%BB%91%E5%BD%B1/</url>
      <content type="html"><![CDATA[<p>项目收尾的时候发现在push时右上角会有黑影，push完成后就消失了，如图：<br><img src="/images/frist.jpeg" alt=""></p>
<h3 id="那么如何解决这个问题呢？"><a href="#那么如何解决这个问题呢？" class="headerlink" title="那么如何解决这个问题呢？"></a>那么如何解决这个问题呢？</h3><a id="more"></a>
<p>　　上网查询而知，iOS 自 7.x 某个版本以后就有这个问题。</p>
<p>实际上很简单，如果这个<code>ViewController</code> 是在 <code>TabBarViewController</code> 的 <code>NavigationController</code> 上  <code>Push/Pop</code> 的，那么只需要把 <code>TabBarViewController 的 View</code>  设置一下白色背景就可以了。</p>
<p>建立一个 <code>UINavigationController</code> 的父类，在父类写上 <code>self.view.backgroundColor = [UIColor whiteColor];</code> 让你的 <code>NavigationController</code> 都继承，这样就OK了。</p>
<p>　　但是到这里为止，只解决了 50%，还有另外一种情况没有解决，那就是如果你 <code>present</code> 了一个 <code>NavigationController + ViewController</code> 后，在这个下面再进行 <code>Pop/Push</code> 也是会有黑影的情况下。这种情况如何解决呢？</p>
<p>类似的，设置一下 <code>self.navigationController.view.backgroundColor = [UIColor whiteColor];</code> 即可。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS 代码格式化插件Clang-Format]]></title>
      <url>https://tate-zwt.github.io/2015/11/15/iOS%20%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%8F%92%E4%BB%B6Clang-Format/</url>
      <content type="html"><![CDATA[<p>最近我在接手同事的项目，发现项目经过多人手后，每人个的代码格式风格又有点差异导致代码显示很乱，Google了一番，发现有一个iOS代码格式插件<a href="https://github.com/travisjeffery/ClangFormat-Xcode" target="_blank" rel="external">Clang-Format</a>，相当的给力。</p>
<p>配置CLangFormat<br>虽然CLangFormat本身就内置了一些标准化的代码格式化方案，但是同样可以自定义，我们就采用了自定义的方法。</p>
<p>具体的，在工程目录或者workspace目录下创建一个”.clang-format”文件</p>
<p>.clang-format 只是一个配置文件，可以复制到任何地方。你可以把它复制到你的项目的根目录，也可以把它复制到你所有项目的根目录。<br><a id="more"></a><br>我的配置参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"># 基础样式</div><div class="line"></div><div class="line">BasedOnStyle: LLVM</div><div class="line"></div><div class="line"># 缩进宽度</div><div class="line"></div><div class="line">IndentWidth: 4</div><div class="line"></div><div class="line"># 圆括号的换行方式</div><div class="line"></div><div class="line">BreakBeforeBraces: Attach</div><div class="line"></div><div class="line"># 支持一行的if</div><div class="line"></div><div class="line">AllowShortIfStatementsOnASingleLine: true</div><div class="line"></div><div class="line"># switch的case缩进</div><div class="line"></div><div class="line">IndentCaseLabels: true</div><div class="line"></div><div class="line"># 针对OC的block的缩进宽度</div><div class="line"></div><div class="line">ObjCBlockIndentWidth: 4</div><div class="line"></div><div class="line"># 针对OC，属性名后加空格</div><div class="line"></div><div class="line">ObjCSpaceAfterProperty: true</div><div class="line"></div><div class="line"># 每行字符的长度</div><div class="line"></div><div class="line">ColumnLimit: 0</div><div class="line"></div><div class="line"># 注释对齐</div><div class="line"></div><div class="line">AlignTrailingComments: true</div><div class="line"></div><div class="line"># 括号后加空格</div><div class="line"></div><div class="line">SpaceAfterCStyleCast: true</div><div class="line"></div><div class="line"># 不在小括号里加空格</div><div class="line"></div><div class="line">SpacesInParentheses: false</div><div class="line"></div><div class="line"># 不在中括号里加空格</div><div class="line"></div><div class="line">SpacesInSquareBrackets: false</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Xcode清理缓存、清理多余provisioning profile 证书]]></title>
      <url>https://tate-zwt.github.io/2015/10/05/Xcode%E6%B8%85%E7%90%86%E7%BC%93%E5%AD%98%E3%80%81%E6%B8%85%E7%90%86%E5%A4%9A%E4%BD%99provisioning-profile-%E8%AF%81%E4%B9%A6/</url>
      <content type="html"><![CDATA[<p>我们开发久了，Xcode的缓存会越来越大，主要是会产生很多项目编译缓存，占用一大堆硬盘空间，这个时候就要清理了。笔者有次清理出20多G的空间，这是相当给力的，你也可以试试哈😄。还有开发多款APP后可能会产生多余的证书provisioning profile，这个时候也是要清理的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">1、清理Xcode编译项目产生的缓存垃圾</div><div class="line"></div><div class="line">手动删除：</div><div class="line"></div><div class="line">打开菜单的前往-&gt;前往文件夹输入—&gt; ~/Library/Developer/Xcode/DerivedData</div><div class="line"></div><div class="line">2、删除Xcode中多余的证书provisioning profile</div><div class="line"></div><div class="line">手动删除：</div><div class="line"></div><div class="line">打开菜单的前往-&gt;前往文件夹输入—&gt; ~/Library/MobileDevice/Provisioning Profiles</div></pre></td></tr></table></figure>
<p>这样对于使用128G的固态MacPro 清理出一定的空间是相当有用的！</p>
]]></content>
    </entry>
    
  
  
</search>
